!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@agm/core"),require("@angular/animations"),require("rxjs/operators"),require("rxjs/internal/Subject"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/icon"),require("@angular/material/input")):"function"==typeof define&&define.amd?define("@angular-material-extensions/google-maps-autocomplete",["exports","@angular/core","@angular/forms","@agm/core","@angular/animations","rxjs/operators","rxjs/internal/Subject","@angular/common","@angular/flex-layout","@angular/material/icon","@angular/material/input"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self)["angular-material-extensions"]=e["angular-material-extensions"]||{},e["angular-material-extensions"]["google-maps-autocomplete"]={}),e.ng.core,e.ng.forms,e.core$1,e.ng.animations,e.rxjs.operators,e.rxjs["internal/Subject"],e.ng.common,e.ng.flexLayout,e.ng.material.icon,e.ng.material.input)}(this,(function(e,t,a,o,n,r,i,s,l,u,p){"use strict";var d,c=function(){function e(){}return e.prototype.validate=function(){var e=this;return function(t){return e.address?null:{validateAddress:{valid:!1}}}},e.prototype.subscribe=function(e){var t=this;this.subscription=e.subscribe((function(e){t.address=e}))},e.prototype.unsubscribe=function(){this.subscription.unsubscribe()},Object.defineProperty(e.prototype,"address",{get:function(){return this._address},set:function(e){this._address=e},enumerable:!1,configurable:!0}),e}();c.decorators=[{type:t.Directive,args:[{selector:"[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]",providers:[{provide:a.NG_VALIDATORS,useExisting:t.forwardRef((function(){return c})),multi:!0}]}]}],c.ctorParameters=function(){return[]},(d=e.Appearance||(e.Appearance={})).STANDARD="standard",d.FILL="fill",d.OUTLINE="outline",d.LEGACY="legacy";var m=function(){function o(o,n){this.mapsAPILoader=o,this.ngZone=n,this.addressLabelText="Address",this.placeholderText="Please enter the address",this.requiredErrorText="The address is required",this.invalidErrorText="The address is not valid",this.appearance=e.Appearance.STANDARD,this.autoCompleteOptions={},this.onChange=new t.EventEmitter,this.onAutocompleteSelected=new t.EventEmitter,this.onGermanAddressMapped=new t.EventEmitter,this.onLocationSelected=new t.EventEmitter,this.onNewPlaceResult=new t.EventEmitter,this.addressValidator=new c,this.addressSearchControl=new a.FormControl({value:null},a.Validators.compose([a.Validators.required,this.addressValidator.validate()])),this.propagateChange=function(e){}}return o.prototype.ngOnInit=function(){this.addressValidator.subscribe(this.onNewPlaceResult);var e={placeIdOnly:this.placeIdOnly,strictBounds:this.strictBounds,type:this.type};this.country&&(e.componentRestrictions={country:this.country}),this.country&&(e.types=this.types),this.autoCompleteOptions=Object.assign(this.autoCompleteOptions,e),this.initGoogleMapsAutocomplete()},o.prototype.initGoogleMapsAutocomplete=function(){var e=this;this.mapsAPILoader.load().then((function(){var t=new google.maps.places.Autocomplete(e.searchElementRef.nativeElement,e.autoCompleteOptions);t.addListener("place_changed",(function(){e.ngZone.run((function(){var a=t.getPlace(),o={gmID:a.id,icon:a.icon,url:a.url,placeID:a.place_id,displayAddress:a.formatted_address,name:a.name,vicinity:a.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};a.geometry&&a.geometry.location&&(o.geoLocation.latitude=a.geometry.location.lat(),o.geoLocation.longitude=a.geometry.location.lng()),a.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(o.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(o.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(o.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(o.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(o.locality.long=e.long_name,o.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(o.state.long=e.long_name,o.state.short=e.short_name),e.types.indexOf("country")>-1&&(o.country.long=e.long_name,o.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(o.locality.short=e.short_name)})),e.onGermanAddressMapped.emit(o),a.place_id&&void 0!==a.geometry&&null!==a.geometry&&(e.value=a,e.propagateChange(e.value),e.address=a.formatted_address,e.onAutocompleteSelected.emit(a),e.onLocationSelected.emit({latitude:a.geometry.location.lat(),longitude:a.geometry.location.lng()}))}))}))})).catch((function(e){return console.log(e)}))},o.prototype.onQuery=function(e){this.onChange.emit(this.address)},o.prototype.resetAddress=function(){this.address=null,this.addressSearchControl.updateValueAndValidity()},o.prototype.writeValue=function(e){e&&(this.value=e)},o.prototype.registerOnChange=function(e){this.propagateChange=e},o.prototype.registerOnTouched=function(e){throw new Error("Method not implemented.")},o.prototype.setDisabledState=function(e){throw new Error("Method not implemented.")},o}();m.decorators=[{type:t.Component,args:[{selector:"mat-google-maps-autocomplete",exportAs:"matGoogleMapsAutocomplete",template:'<mat-form-field class="full-width" [appearance]="appearance">\n  <mat-label>{{addressLabelText}}</mat-label>\n  <input matInput\n         [(ngModel)]="address"\n         (change)="onQuery($event)"\n         placeholder="{{placeholderText}}"\n         class="form-control"\n         #search\n         MatValidateAddress\n         required>\n  <mat-error *ngIf="addressSearchControl.hasError(\'required\')">\n    {{requiredErrorText}}\n  </mat-error>\n  <mat-error *ngIf="addressSearchControl.hasError(\'validateAddress\')">\n    {{invalidErrorText}}\n  </mat-error>\n</mat-form-field>\n',providers:[{provide:a.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return m})),multi:!0}],styles:[".full-width{width:100%}"]}]}],m.ctorParameters=function(){return[{type:o.MapsAPILoader},{type:t.NgZone}]},m.propDecorators={searchElementRef:[{type:t.ViewChild,args:["search"]}],addressLabelText:[{type:t.Input}],placeholderText:[{type:t.Input}],requiredErrorText:[{type:t.Input}],invalidErrorText:[{type:t.Input}],appearance:[{type:t.Input}],value:[{type:t.Input}],address:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],autoCompleteOptions:[{type:t.Input}],onChange:[{type:t.Output}],onAutocompleteSelected:[{type:t.Output}],onGermanAddressMapped:[{type:t.Output}],onLocationSelected:[{type:t.Output}]};var y=n.animation([n.style({opacity:"{{opacity}}",transform:"scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})"}),n.animate("{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)",n.style("*"))],{params:{duration:"200ms",delay:"0ms",opacity:"0",scale:"1",x:"0",y:"0",z:"0"}}),h=[n.trigger("animate",[n.transition("void => *",[n.useAnimation(y)])]),n.trigger("animateStagger",[n.state("50",n.style("*")),n.state("100",n.style("*")),n.state("200",n.style("*")),n.transition("void => 50",n.query("@*",[n.stagger("50ms",[n.animateChild()])],{optional:!0})),n.transition("void => 100",n.query("@*",[n.stagger("100ms",[n.animateChild()])],{optional:!0})),n.transition("void => 200",n.query("@*",[n.stagger("200ms",[n.animateChild()])],{optional:!0}))])],g=function(){function o(a){this.formBuilder=a,this.appearance=e.Appearance.STANDARD,this.searchAddressLabel="Search Address",this.streetNameLabel="Street",this.streetNumberLabel="Nr.",this.postalCodeLabel="PLZ",this.localityLabel="Locality",this.vicinityLabel="Vicinity",this.onGermanAddressMapped=new t.EventEmitter,this.firstInit=!0,this.propagateChange=function(e){},this._unsubscribeAll=new i.Subject}return Object.defineProperty(o.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e,this.propagateChange(this.value)},enumerable:!1,configurable:!0}),o.prototype.ngOnInit=function(){this.createAddressFormGroup(),this.enableCustomInput()},o.prototype.createAddressFormGroup=function(){this.addressFormGroup=this.formBuilder.group({streetName:[this.value&&this.value.streetName?this.value.streetName:null,a.Validators.required],streetNumber:[this.value&&this.value.streetNumber?this.value.streetNumber:null,a.Validators.required],postalCode:[this.value&&this.value.postalCode?this.value.postalCode:null,a.Validators.required],vicinity:[this.value&&this.value.vicinity?this.value.vicinity:null],locality:this.formBuilder.group({long:[this.value&&this.value.locality&&this.value.locality.long?this.value.locality.long:null,a.Validators.required]})})},o.prototype.enableCustomInput=function(){var e=this;this.addressFormGroup.get("streetName").valueChanges.pipe(r.distinctUntilChanged(),r.debounceTime(400),r.takeUntil(this._unsubscribeAll)).subscribe((function(t){console.log("custom input for street Name",t),console.log("custom input - new german address",e.value),e.value?e.value.streetName=t:e.value={streetName:t},e.value.displayAddress=e.parseDisplayAddress()})),this.addressFormGroup.get("streetNumber").valueChanges.pipe(r.distinctUntilChanged(),r.debounceTime(400),r.takeUntil(this._unsubscribeAll)).subscribe((function(t){e.value?e.value.streetNumber=t:e.value={streetNumber:t},console.log("custom input - new german address",e.value),e.value.displayAddress=e.parseDisplayAddress()})),this.addressFormGroup.get("postalCode").valueChanges.pipe(r.distinctUntilChanged(),r.debounceTime(400),r.takeUntil(this._unsubscribeAll)).subscribe((function(t){e.value?e.value.postalCode=t:e.value={postalCode:t},console.log("custom input - new german address",e.value),e.value.displayAddress=e.parseDisplayAddress()})),this.addressFormGroup.get("vicinity").valueChanges.pipe(r.distinctUntilChanged(),r.debounceTime(400),r.takeUntil(this._unsubscribeAll)).subscribe((function(t){e.value?e.value.vicinity=t:e.value={vicinity:t},console.log("custom input - new german address",e.value),e.value.displayAddress=e.parseDisplayAddress()})),this.addressFormGroup.get("locality").valueChanges.pipe(r.distinctUntilChanged(),r.debounceTime(400),r.takeUntil(this._unsubscribeAll)).subscribe((function(t){e.value?e.value.locality=t:e.value={locality:t},console.log("custom input - new german address",e.value),e.value.displayAddress=e.parseDisplayAddress()}))},o.prototype.parseDisplayAddress=function(){var e,t,a,o,n;return(null===(e=this.value)||void 0===e?void 0:e.streetName)+" "+(null===(t=this.value)||void 0===t?void 0:t.streetNumber)+", "+(null===(a=this.value)||void 0===a?void 0:a.postalCode)+" "+(null===(n=null===(o=this.value)||void 0===o?void 0:o.locality)||void 0===n?void 0:n.long)},o.prototype.syncAutoComplete=function(e){this.germanAddress&&this.addressFormGroup.reset();var t=function(e){var t={gmID:e.id,icon:e.icon,url:e.url,placeID:e.place_id,displayAddress:e.formatted_address,name:e.name,vicinity:e.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};return e.geometry&&e.geometry.location&&(t.geoLocation.latitude=e.geometry.location.lat(),t.geoLocation.longitude=e.geometry.location.lng()),e.address_components&&e.address_components.length>0&&e.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(t.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(t.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(t.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(t.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(t.locality.long=e.long_name,t.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(t.state.long=e.long_name,t.state.short=e.short_name),e.types.indexOf("country")>-1&&(t.country.long=e.long_name,t.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(t.locality.short=e.short_name)})),t}(e);this.germanAddress=t,t.vicinity&&this.addressFormGroup.get("vicinity").patchValue(t.vicinity,{emitEvent:!1,onlySelf:!0}),t.streetName&&this.addressFormGroup.get("streetName").patchValue(t.streetName,{emitEvent:!1,onlySelf:!0}),t.streetNumber&&this.addressFormGroup.get("streetNumber").patchValue(t.streetNumber.toString(),{emitEvent:!1,onlySelf:!0}),t.postalCode&&this.addressFormGroup.get("postalCode").patchValue(t.postalCode,{emitEvent:!1,onlySelf:!0}),t.locality&&t.locality.long&&this.addressFormGroup.get("locality.long").patchValue(t.locality.long,{emitEvent:!1,onlySelf:!0}),this.value=t,this.onGermanAddressMapped.emit(t)},o.prototype.writeValue=function(e){var t=!1;e&&(!this.value&&this.firstInit&&(t=!0),this.value=e,t&&(this.createAddressFormGroup(),this.firstInit=!1))},o.prototype.registerOnChange=function(e){this.propagateChange=e},o.prototype.registerOnTouched=function(e){},o.prototype.setDisabledState=function(e){},o}();g.decorators=[{type:t.Component,args:[{selector:"mat-search-google-maps-autocomplete",template:'<div fxLayout="column">\n  <div *ngIf="!disableSearch" fxFlex="100">\n    \x3c!--search address--\x3e\n    <mat-form-field fxFlex="auto" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)="syncAutoComplete($event)"\n        [country]="country"\n        [placeIdOnly]="placeIdOnly"\n        [strictBounds]="strictBounds"\n        [types]="types"\n        [type]="type"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color="primary" matSuffix>search</mat-icon>\n      \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]="addressFormGroup" fxFlex fxLayoutGap="10px">\n    <div fxLayout="row" fxLayoutGap="10px">\n      <mat-form-field fxFlex="80"\n                      [appearance]="appearance"\n                      [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]="readonly"\n          formControlName="streetName"\n          matInput\n          required\n        />\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\n      </mat-form-field>\n      <mat-form-field fxFlex="20" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]="readonly"\n          formControlName="streetNumber"\n          matInput\n          required\n        />\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\n      </mat-form-field>\n    </div>\n    <div fxLayout="row" fxLayoutGap="10px">\n      <mat-form-field fxFlex="20" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]="readonly"\n          formControlName="postalCode"\n          matInput\n          required\n        />\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\n      </mat-form-field>\n      <mat-form-field *ngIf="showVicinity" fxFlex="auto"\n                      [appearance]="appearance"\n                      [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]="readonly"\n          matInput\n          formControlName="vicinity"\n        />\n      </mat-form-field>\n      <div formGroupName="locality" fxFlex="auto">\n        <mat-form-field fxFlex="auto" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]="readonly"\n            formControlName="long"\n            matInput\n            required\n          />\n          <mat-icon color="primary" matSuffix>add_location</mat-icon>\n          \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n',animations:h,providers:[{provide:a.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return g})),multi:!0}],styles:[""]}]}],g.ctorParameters=function(){return[{type:a.FormBuilder}]},g.propDecorators={appearance:[{type:t.Input}],searchAddressLabel:[{type:t.Input}],streetNameLabel:[{type:t.Input}],streetNumberLabel:[{type:t.Input}],postalCodeLabel:[{type:t.Input}],localityLabel:[{type:t.Input}],vicinityLabel:[{type:t.Input}],showVicinity:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],readonly:[{type:t.Input}],disableSearch:[{type:t.Input}],_value:[{type:t.Input}],onGermanAddressMapped:[{type:t.Output}],value:[{type:t.Input}]};var f=function(){function e(e,o,n,r){this.platformId=e,this.elemRef=o,this.mapsAPILoader=n,this.ngZone=r,this.autoCompleteOptions={},this.onChange=new t.EventEmitter,this.onAutocompleteSelected=new t.EventEmitter,this.onGermanAddressMapped=new t.EventEmitter,this.onLocationSelected=new t.EventEmitter,this.onNewPlaceResult=new t.EventEmitter,this.addressValidator=new c,this.addressSearchControl=new a.FormControl({value:null},a.Validators.compose([a.Validators.required,this.addressValidator.validate()])),this.propagateChange=function(e){}}return e.prototype.ngOnInit=function(){if(s.isPlatformBrowser(this.platformId)){this.addressValidator.subscribe(this.onNewPlaceResult);var e={placeIdOnly:this.placeIdOnly,strictBounds:this.strictBounds,type:this.type};this.country&&(e.componentRestrictions={country:this.country}),this.country&&(e.types=this.types),this.autoCompleteOptions=Object.assign(this.autoCompleteOptions,e),this.initGoogleMapsAutocomplete()}},e.prototype.initGoogleMapsAutocomplete=function(){var e=this;this.mapsAPILoader.load().then((function(){var t=new google.maps.places.Autocomplete(e.elemRef.nativeElement,e.autoCompleteOptions);t.addListener("place_changed",(function(){e.ngZone.run((function(){var a=t.getPlace(),o={gmID:a.id,icon:a.icon,url:a.url,placeID:a.place_id,displayAddress:a.formatted_address,name:a.name,vicinity:a.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};a.geometry&&a.geometry.location&&(o.geoLocation.latitude=a.geometry.location.lat(),o.geoLocation.longitude=a.geometry.location.lng()),a.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(o.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(o.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(o.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(o.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(o.locality.long=e.long_name,o.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(o.state.long=e.long_name,o.state.short=e.short_name),e.types.indexOf("country")>-1&&(o.country.long=e.long_name,o.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(o.locality.short=e.short_name)})),e.onGermanAddressMapped.emit(o),a.place_id&&void 0!==a.geometry&&null!==a.geometry&&(e.value=a,e.propagateChange(e.value),e.address=a.formatted_address,e.onAutocompleteSelected.emit(a),e.onLocationSelected.emit({latitude:a.geometry.location.lat(),longitude:a.geometry.location.lng()}))}))}))})).catch((function(e){return console.log(e)}))},e.prototype.registerOnChange=function(e){this.propagateChange=e},e.prototype.registerOnTouched=function(e){},e.prototype.setDisabledState=function(e){},e.prototype.writeValue=function(e){e&&(this.value=e)},e}();f.decorators=[{type:t.Directive,args:[{selector:"[matGoogleMapsAutocomplete]",exportAs:"matGoogleMapsAutocomplete",providers:[{provide:a.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return f})),multi:!0}]}]}],f.ctorParameters=function(){return[{type:String,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]},{type:t.ElementRef},{type:o.MapsAPILoader},{type:t.NgZone}]},f.propDecorators={address:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],autoCompleteOptions:[{type:t.Input}],onChange:[{type:t.Output}],onAutocompleteSelected:[{type:t.Output}],onGermanAddressMapped:[{type:t.Output}],onLocationSelected:[{type:t.Output}]};var v=function(){};v.decorators=[{type:t.NgModule,args:[{imports:[s.CommonModule,a.FormsModule,a.ReactiveFormsModule,l.FlexLayoutModule,p.MatInputModule,u.MatIconModule],exports:[m,f,c,g],declarations:[m,f,c,g]}]}],e.MatGoogleMapsAutocompleteComponent=m,e.MatGoogleMapsAutocompleteDirective=f,e.MatGoogleMapsAutocompleteModule=v,e.MatSearchGoogleMapsAutocompleteComponent=g,e.MatValidateAddressDirective=c,e.ɵa=m,e.ɵb=g,e.ɵc=h,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=angular-material-extensions-google-maps-autocomplete.umd.min.js.map