{"version":3,"sources":["../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.ts","../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/address-validator/mat-address-validator.directive.ts","../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/animations/index.ts","../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/helpers/parser.ts","../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/mat-google-maps-autocomplete.directive.ts","../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/mat-google-maps-autocomplete.module.ts"],"names":["Appearance","MatValidateAddressDirective","prototype","validate","_this","this","control","address","validateAddress","valid","subscribe","eventEmitter","subscription","unsubscribe","Object","defineProperty","_address","value","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","MatGoogleMapsAutocompleteComponent","mapsAPILoader","ngZone","addressLabelText","placeholderText","requiredErrorText","invalidErrorText","appearance","STANDARD","autoCompleteOptions","onChange","EventEmitter","onAutocompleteSelected","onGermanAddressMapped","onLocationSelected","onNewPlaceResult","addressValidator","addressSearchControl","FormControl","Validators","compose","required","propagateChange","_","ngOnInit","options","placeIdOnly","strictBounds","type","country","componentRestrictions","types","assign","initGoogleMapsAutocomplete","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","nativeElement","addListener","run","place","getPlace","germanAddress","gmID","id","icon","url","placeID","place_id","displayAddress","formatted_address","name","vicinity","locality","state","geoLocation","latitude","longitude","geometry","location","lat","lng","address_components","forEach","indexOf","streetNumber","short_name","streetName","long_name","postalCode","Number","sublocality","long","short","emit","undefined","catch","err","console","log","onQuery","event","resetAddress","updateValueAndValidity","writeValue","obj","registerOnChange","fn","registerOnTouched","Error","setDisabledState","isDisabled","Component","exportAs","template","NG_VALUE_ACCESSOR","MapsAPILoader","NgZone","ViewChild","Input","Output","customAnimation","animation","style","opacity","transform","animate","params","duration","delay","scale","x","y","z","InputAnimations","trigger","transition","useAnimation","query","stagger","animateChild","optional","MatSearchGoogleMapsAutocompleteComponent","formBuilder","searchAddressLabel","streetNameLabel","streetNumberLabel","postalCodeLabel","localityLabel","vicinityLabel","firstInit","_unsubscribeAll","Subject","_value","createAddressFormGroup","enableCustomInput","addressFormGroup","group","get","valueChanges","pipe","distinctUntilChanged","debounceTime","takeUntil","parseDisplayAddress","_a","_b","_c","_e","_d","syncAutoComplete","$event","reset","placeResult","length","parseGermanAddress","patchValue","emitEvent","onlySelf","toString","shouldRecreateFG","animations","FormBuilder","MatGoogleMapsAutocompleteDirective","platformId","elemRef","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule","exports","declarations"],"mappings":"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","sourcesContent":["import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  value: PlaceResult;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\nimport {debounceTime, distinctUntilChanged, takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs/internal/Subject';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  constructor(private formBuilder: FormBuilder) {\n    // Set the private defaults\n    this._unsubscribeAll = new Subject();\n  }\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input() private _value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n  firstInit = true;\n\n  // Private\n  private _unsubscribeAll: Subject<any>;\n\n  propagateChange = (_: any) => {\n  };\n\n\n  get value(): GermanAddress {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: GermanAddress) {\n    this._value = value;\n    this.propagateChange(this.value);\n  }\n\n  ngOnInit() {\n    this.createAddressFormGroup();\n    this.enableCustomInput();\n  }\n\n  createAddressFormGroup(): void {\n    this.addressFormGroup = this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  enableCustomInput() {\n    this.addressFormGroup\n      .get('streetName')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetName => {\n        console.log('custom input for street Name', streetName);\n        console.log('custom input - new german address', this.value);\n        !this.value ? this.value = {streetName} : this.value.streetName = streetName;\n        this.value.displayAddress = this.parseDisplayAddress();\n      });\n    this.addressFormGroup\n      .get('streetNumber')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetNumber => {\n        !this.value ? this.value = {streetNumber} : this.value.streetNumber = streetNumber;\n        console.log('custom input - new german address', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n      });\n    this.addressFormGroup\n      .get('postalCode')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(postalCode => {\n        !this.value ? this.value = {postalCode} : this.value.postalCode = postalCode;\n        console.log('custom input - new german address', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n      });\n    this.addressFormGroup\n      .get('vicinity')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(vicinity => {\n        !this.value ? this.value = {vicinity} : this.value.vicinity = vicinity;\n        console.log('custom input - new german address', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n      });\n    this.addressFormGroup\n      .get('locality')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(locality => {\n        !this.value ? this.value = {locality} : this.value.locality = locality;\n        console.log('custom input - new german address', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n      });\n  }\n\n  parseDisplayAddress() {\n    return `${this.value?.streetName} ${this.value?.streetNumber}, ${this.value?.postalCode} ${this.value?.locality?.long}`\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, {emitEvent: false, onlySelf: true});\n    }\n\n    this.value = germanAddress;\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n  writeValue(obj: any): void {\n    let shouldRecreateFG = false;\n    if (obj) {\n      if (!this.value && this.firstInit) {\n        shouldRecreateFG = true;\n      }\n      this.value = obj;\n      if (shouldRecreateFG) {\n        this.createAddressFormGroup();\n        this.firstInit = false;\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  value: PlaceResult;\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n"]}